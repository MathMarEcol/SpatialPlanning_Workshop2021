[{"path":"index.html","id":"welcome","chapter":"1 Welcome!","heading":"1 Welcome!","text":"aim workshop help get started using prioritizr R package systematic conservation planning. designed give comprehensive overview become expert completing workshop. Instead, want help understand core principles conservation planning guide common tasks involved developing prioritizations. words, want give knowledge base confidence needed start applying systematic conservation planning work.workshop run 6-9 (Brisbane Time) Tuesday 9th Wednesday 10th February 20201 accommodate European friends. rough plan workshop cover Chapters 1-3 Day 1, Chapters 4-5 Day 2. hope leave lots time discussion.","code":""},{"path":"setup.html","id":"setup","chapter":"2 Setting up your computer","heading":"2 Setting up your computer","text":"need R RStudio installed computer complete workshop. Although imperative latest version RStudio installed, need least version 4.0 R installed . Please note might need administrative permissions install programs. installing , also need install R packages . Finally, also need download data workshop.","code":""},{"path":"setup.html","id":"r","chapter":"2 Setting up your computer","heading":"2.1 R","text":"R statistical computing environment can downloaded Comprehensive R Archive Network (CRAN). Specifically, can download latest version R (version 4.0.3) : https://cloud.r-project.org. Please note need download correct file operating system (.e. Linux, Mac OSX, Windows).","code":""},{"path":"setup.html","id":"rstudio","chapter":"2 Setting up your computer","heading":"2.2 RStudio","text":"RStudio integrated development environment (IDE). words, program designed make R programming experience enjoyable. workshop, interact R RStudio—meaning open RStudio code R. can download latest version RStudio : http://www.rstudio.com/download. start RStudio, see two main parts interface:can type R code Console press enter key run code.","code":""},{"path":"setup.html","id":"r-packages","chapter":"2 Setting up your computer","heading":"2.3 R packages","text":"R package collection R code documentation can installed enhance standard R environment additional functionality. Currently, fifteen thousand R packages available CRAN. R packages developed perform specific task, reading Excel spreadsheets, downloading satellite imagery data, downloading cleaning protected area data, fitting environmental niche models. fact, R diverse ecosystem R packages, question almost always “can use R …?” “R package can use …?”. workshop, use several R packages. install R packages, please enter code Console part RStudio interface press enter. Note require Internet connection installation process may take time complete.new code workshop relies prioritizr R package v6.0 available Github moment. CRAN version currently 5.03. install v6.0 don’t wish . instances code able run. want try v6.0 can run:require tools required building packages installed computer RStudio help process can get help : https://support.rstudio.com/hc/en-us/articles/200486498-Package-Development-Prerequisites.","code":"\ninstall.packages(c(\"sf\", \"dplyr\", \"sp\", \"rgeos\", \"rgdal\", \"raster\",\n                   \"units\", \"prioritizr\", \"prioritizrdata\",\n                   \"mapview\", \"assertthat\", \"remotes\", \"gridExtra\",\n                   \"BiocManager\"))\nBiocManager::install(\"lpsymphony\")\ndevtools::install_github(\"prioritizr/prioritizr\")"},{"path":"setup.html","id":"optimisation-software","chapter":"2 Setting up your computer","heading":"2.4 Optimisation Software","text":"possible use lpsymphony package installed , Gurobi powerful fastest solver prioritizr R package can use solve conservation planning problems. section walk process setting Gurobi computer. encounter problems following instructions , check official Gurobi documentation. can’t solve problems, don’t worry. can use lpsymphony.","code":""},{"path":"setup.html","id":"obtaining-a-license","chapter":"2 Setting up your computer","heading":"2.4.1 Obtaining a license","text":"Gurobi commercial computer program. means users need obtain license Gurobi can use . Although academics can obtain special license cost, individuals affiliated recognized educational institution may need purchase license use Gurobi. academic affiliated educational institution, can take advantage special academic license use Gurobi cost. signed free account can request free academic license.accept Terms Service can generate license.Now, copy save grbgetkey XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX command later use.","code":""},{"path":"setup.html","id":"downloading-the-gurobi-software-suite","chapter":"2 Setting up your computer","heading":"2.4.2 Downloading the Gurobi software suite","text":"obtaining license, need download copy Gurobi installer computer. achieve , visit Gurobi downloads web page download correct version installer operating system.","code":""},{"path":"setup.html","id":"software-installation","chapter":"2 Setting up your computer","heading":"2.4.3 Software installation","text":"installation process Gurobi software suite depends type operating system installed computer. Fortunately, Gurobi provide platform-specific “Quick Start Guides” Windows, Mac OSX, Linux systems help . Briefly, Windows Mac systems, just need double-click Gurobi installer, follow prompts, installer take care rest.installing Gurobi software suite computer, need activate license.","code":""},{"path":"setup.html","id":"license-activation","chapter":"2 Setting up your computer","heading":"2.4.4 License activation","text":"Now activate Gurobi software using license downloaded earlier. Please note correct set instructions depends system license. cases, follow instructions “Local license activation”. , , activating special Academic license networked computer connected university’s network (e.g. cloud-based system), please follow instructions “Cloud license activation SSH” section.","code":""},{"path":"setup.html","id":"local-license-activation","chapter":"2 Setting up your computer","heading":"2.4.5 Local license activation","text":"activate license, simply copy paste grbgetkey command computer’s command prompt terminal (note Windows users can open command prompt typing cmd search box pressing enter key). running grbgetkey command correct license code, see output looks something like screen shot .","code":""},{"path":"setup.html","id":"install-gurobi-r","chapter":"2 Setting up your computer","heading":"2.4.6 Install gurobi R","text":"install R package, instructions can found . Briefly can install substituting <R-package-file> code location Gurobi software computer.Depending local R environment might need install R package slam. , issue following command within R:","code":"\ninstall.packages('<R-package-file>', repos=NULL)\n\n# For a Mac it would be:\ninstall.packages(\"/Library/gurobi911/mac64/R/gurobi_9.1-1_R_4.0.2.tgz\", repos = NULL)\ninstall.packages('slam')"},{"path":"setup.html","id":"test-your-install","chapter":"2 Setting up your computer","heading":"2.5 Test your install","text":"can check successfully installed Gurobi running code . don’t get errors, good go. Don’t worry means. going learn.couldn’t install Gurobi, instead went lpsymphony, try substituting add_gurobi_solver(verbose = FALSE) add_lpsymphony_solver(verbose = FALSE).","code":"\nlibrary(prioritizr)\n\ndata(sim_pu_raster)\ndata(sim_features)\n\np <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_binary_decisions() %>%\n  add_relative_targets(0.1) %>%\n  add_gurobi_solver(verbose = FALSE)\n\ns <- solve(p)"},{"path":"overview-of-the-conservation-planning-problem.html","id":"overview-of-the-conservation-planning-problem","chapter":"3 Overview of the conservation planning problem","heading":"3 Overview of the conservation planning problem","text":"","code":""},{"path":"overview-of-the-conservation-planning-problem.html","id":"summary","chapter":"3 Overview of the conservation planning problem","heading":"3.1 Summary","text":"prioritizr R package uses integer linear programming (ILP) techniques provide flexible interface building solving conservation planning problems (Rodrigues et al. 2000; Billionnet 2013). supports broad range objectives, constraints, penalties can used customize conservation planning problems specific needs conservation planning exercise.built, conservation planning problems can solved using variety commercial open-source exact algorithm solvers. contrast algorithms conventionally used solve conservation problems, heuristics simulated annealing (Ball et al. 2009), exact algorithms used guaranteed find optimal solutions.Furthermore, conservation problems can constructed optimize spatial allocation different management zone (actions), meaning conservation practitioners can identify solutions benefit multiple stakeholders.","code":""},{"path":"overview-of-the-conservation-planning-problem.html","id":"introduction","chapter":"3 Overview of the conservation planning problem","heading":"3.2 Introduction","text":"Systematic conservation planning rigorous, repeatable, structured approach designing new protected areas efficiently meet conservation objectives (Margules & Pressey 2000).Historically, conservation decision-making often evaluated parcels opportunistically became available purchase, donation, threat. Although purchasing areas may improve status quo, decisions may substantially enhance long-term persistence target species communities.Therefore conservation planners began using decision support tools help simulate alternative reserve designs range different biodiversity management goals , ultimately, guide protected area acquisitions management actions. Due systematic, evidence-based nature tools, conservation prioritization can help contribute transparent, inclusive, defensible decision making process.","code":""},{"path":"overview-of-the-conservation-planning-problem.html","id":"overall-concepts","chapter":"3 Overview of the conservation planning problem","heading":"3.2.1 Overall Concepts","text":"several concepts underpin conservation planning problems. :Study Area: conservation planning exercise typically starts defining study area. study area encompass areas relevant decision maker hypothesis tested. extent study area encompass important localities (e.g. Stigner et al. 2016), single state (e.g. Kirkpatrick 1983), entire country (Fuller et al. 2010), entire planet (Butchart et al. 2015).Planning units: Planning units building blocks reserve system. planning unit represents discrete locality study area can managed independently areas. general idea combination planning units can selected conservation actions (e.g. protected area establishment, habitat restoration). Planning units often created square hexagon cells sized according scale conservation actions, resolution data underpin planning exercise (see Klein et al. 2009).Features: conservation feature measurable, spatially definable component biodiversity conserved within reserve network (e.g., species, communities, habitat types, populations, etc.). identifying set relevant conservation features conservation planning exercise, spatially explicit data need obtained every feature describe spatial distribution (e.g. habitat suitability data, probability occurrence data, presence/absence data). important ensure conservation features adequately covered (represented) prioritizations.Target: conservation feature given target. Targets quantitative values (amounts) conservation feature achieved final reserve solutionCost: cost including planning unit reserve system. cost reflect socio-political constraints setting aside planning unit conservation actions. : total area, cost acquisition relative social, economic ecological measure (e.g loss fishing logging land). planning unit assigned one cost (although several measures can combined create cost metric)Objectives: objective used specify overall goal conservation planning problem. conservation planning problems involve minimizing maximizing kind objectivePenalties: penalty can applied conservation planning problem penalize solutions according specific metric. Penalties—unlike constraints—act explicit trade-objective minimized maximized.Constraints: Constraints can used ensure solutions exhibit range different characteristics. instance, can used lock lock certain planning units solution, protected areas degraded land (respectively).Portfolios: Conservation planning exercises rarely access data needed identify truly perfect solution. available data may lack important details contain errors. , conservation planners can help decision makers providing portfolio solutions inform decision.","code":""},{"path":"overview-of-the-conservation-planning-problem.html","id":"choosing-marine-reserves-the-c.a.r.e.-approach","chapter":"3 Overview of the conservation planning problem","heading":"3.2.2 Choosing Marine Reserves: The C.A.R.E. Approach","text":"","code":""},{"path":"overview-of-the-conservation-planning-problem.html","id":"the-optimisation-problem","chapter":"3 Overview of the conservation planning problem","heading":"3.2.3 The Optimisation Problem","text":"prioritizr R package designed help build solve conservation planning problems. Specifically, prioritizations generated using formulating mathematical optimization problem solving generate solution. mathematical optimization problems formulated using planning unit data, cost data, feature data, information related overarching aim prioritization process.general, goal optimization problem minimize (maximize) objective function calculated using set decision variables, subject series constraints ensure solution exhibits specific properties. objective function describes quantity trying minimize (e.g. cost solution) maximize (e.g. number features conserved). decision variables describe entities can control, indicate planning units selected conservation management . constraints can thought rules need decision variables need follow.\nFigure 3.1: Prioritizr problem equation\n\nFigure 3.2: Prioritizr Objective\n\nFigure 3.3: Score Calculation\nwide variety approaches developed solving optimization problems. Reserve design problems frequently solved using simulated annealing (Kirkpatrick et al. 1983) heuristics (Nicholls & Margules 1993; Moilanen 2007). methods conceptually simple can applied wide variety optimization problems. However, scale well large complex problems (Beyer et al. 2016). Additionally, methods tell close given solution optimal solution.prioritizr R package uses exact algorithms efficiently solve conservation planning problems within pre-specified optimality gap. words, can specify need optimal solution (.e. gap 0%) algorithms , given enough time, find solution meets criteria.past, exact algorithms slow conservation planning exercises (Pressey et al. 1996). However, improvements last decade mean now much faster (Achterberg & Wunderling 2013; Beyer et al. 2016). package, optimization problems expressed using integer linear programming (ILP) can solved using (linear) exact algorithm solvers.","code":""},{"path":"getting-started-with-prioritizr.html","id":"getting-started-with-prioritizr","chapter":"4 Getting Started with Prioritizr","heading":"4 Getting Started with Prioritizr","text":"","code":""},{"path":"getting-started-with-prioritizr.html","id":"package-overview","chapter":"4 Getting Started with Prioritizr","heading":"4.1 Package overview","text":"prioritizr R package contains eight main types functions. functions used :create new conservation planning problem specifying planning units, features, management zones conservation interest (e.g. species, ecosystems).add objective conservation planning problem.add targets problem specify much feature desired required conserved solutions.add constraints conservation planning problem ensure solutions exhibit specific properties (e.g. select specific planning units protection).add penalties problem penalize solutions according specific metric (e.g. connectivity).add decisions problem specify nature decisions problem.add methods generate portfolio solutions.add solver conservation problem specify software used generate solutions customize optimization process.solve conservation problem.evaluate solution computing summary statistics.evaluate relative importance (irreplaceability) planning units selected solution.","code":""},{"path":"getting-started-with-prioritizr.html","id":"package-work-flow","chapter":"4 Getting Started with Prioritizr","heading":"4.2 Package work flow","text":"general work flow using prioritizr R package starts creating new conservation planning problem object using data. Specifically, problem object constructed using data specify:\n* planning units,\n* biodiversity features,\n* management zones (applicable), \n* costs.creating new problem object, can customized adding:\n* objectives,\n* penalties constraints\nbuild precise representation conservation planning problem required.solved obtain solutions.","code":""},{"path":"getting-started-with-prioritizr.html","id":"objectives","chapter":"4 Getting Started with Prioritizr","heading":"4.2.1 Objectives","text":"conservation planning problems require objective. objective specifies property used compare different feasible solutions. Simply put, objective property solution maximized minimized optimization process. instance:\n* minimum set objective (specified using add_min_set_objective), seeking minimize cost solution (similar Marxan)\n* maximum coverage objective (specified using add_max_cover_objective), seeking maximize number different features represented solution.Many objectives require targets (e.g. minimum set objective). Targets specialized set constraints relate total quantity feature secured solution (e.g. amount suitable habitat number individuals). Fo example:\n* minimum set objective ( add_min_set_objective) used ensure solutions secure sufficient quantity feature\n* maximum features objective ( add_max_features_objective) used assess whether feature adequately conserved candidate solution.Targets can expressed:\n* numerically total amount required given feature (using add_absolute_targets), \n* proportion total amount found planning units (using add_relative_targets).Note objectives require targets, warning thrown attempt made add targets problem objective use .","code":""},{"path":"getting-started-with-prioritizr.html","id":"penaltes-and-constraints","chapter":"4 Getting Started with Prioritizr","heading":"4.2.2 Penaltes and Constraints","text":"Constraints penalties can added conservation planning problem ensure solutions exhibit specific property penalize solutions don’t exhibit specific property (respectively).\n* Constraints used rule potential solutions don’t exhibit specific property. instance, constraints can used ensure specific planning units selected solution prioritization (using add_locked_in_constraints) selected solution prioritization (using add_locked_out_constraints).\n* Penalties combined objective problem, penalty factor, overall objective problem becomes minimize (maximize) primary objective function penalty function. example, penalties can added problem penalize solutions excessively fragmented (using add_boundary_penalties). penalties penalty argument specifies relative importance spatially clustered solutions. argument penalty high, solutions less fragmented valued highly—even cost —argument penalty low, solutions fragmented valued less highly.building conservation problem, can solved obtain solution (portfolio solutions desired). solution returned format planning unit data used construct problem. means raster shapefile / vector data used initializing problem, solution also raster shapefile / vector data.","code":""},{"path":"getting-started-with-prioritizr.html","id":"usage","chapter":"4 Getting Started with Prioritizr","heading":"4.3 Usage","text":"provide introduction using prioritizr R package build solve conservation planning problem.First, load prioritizr package.","code":"\n# load package\nlibrary(prioritizr)\n\n# set default options for printing tabular data\noptions(tibble.width = Inf)"},{"path":"getting-started-with-prioritizr.html","id":"simulated-data","chapter":"4 Getting Started with Prioritizr","heading":"4.3.1 Simulated Data","text":"Now load built-data sets distributed prioritizr R package. package contains several different planning unit data sets. provide comprehensive overview different ways can initialize conservation planning problem, load .First, load raster planning unit data (sim_pu_raster). , planning units represented raster (.e. RasterLayer object) pixel corresponds spatial extent planning unit. pixel values correspond acquisition costs planning unit.Secondly, load one spatial vector planning unit data sets (sim_pu_polygons). , polygon (.e. feature using ArcGIS terminology) corresponds different planning unit. data set attribute table contains additional information polygon. Namely, cost field (column) attribute table contains acquisition cost planning unit.Thirdly, load planning unit data stored tabular format (.e. data.frame format). row planning unit table must correspond different planning unit. table must also “id” column provide unique integer identifier planning unit, must also column indicates cost planning unit.Finally, load data showing spatial distribution conservation features. conservation features (sim_features) represented stack raster objects (.e. RasterStack object) layer corresponds different feature (e.g. multi-band GeoTIFF band corresponds different feature). pixel values layer correspond amount suitable habitat available given planning unit. Note planning unit raster layer conservation feature stack exactly spatial properties (.e. resolution, extent, coordinate reference system) pixels line perfectly.","code":"\n# load raster planning unit data\ndata(sim_pu_raster)\n\n# print description of the data\nprint(sim_pu_raster)## class      : RasterLayer \n## dimensions : 10, 10, 100  (nrow, ncol, ncell)\n## resolution : 0.1, 0.1  (x, y)\n## extent     : 0, 1, 0, 1  (xmin, xmax, ymin, ymax)\n## crs        : NA \n## source     : memory\n## names      : layer \n## values     : 190.1328, 215.8638  (min, max)\n# plot the data\nplot(sim_pu_raster)\n# load polygon planning unit data\ndata(sim_pu_polygons)\n\n# print first six rows of attribute table\nhead(sim_pu_polygons@data)##       cost locked_in locked_out\n## 1 215.8638     FALSE      FALSE\n## 2 212.7823     FALSE      FALSE\n## 3 207.4962     FALSE      FALSE\n## 4 208.9322     FALSE       TRUE\n## 5 214.0419     FALSE      FALSE\n## 6 213.7636     FALSE      FALSE\n# plot the planning units\nspplot(sim_pu_polygons, zcol = \"cost\")\n# specify file path for planning unit data\npu_path <- system.file(\"extdata/input/pu.dat\", package = \"prioritizr\")\n\n# load in the tabular planning unit data\n# note that we use the data.table::fread function, as opposed to the read.csv\n# function, because it is much faster\npu_dat <- data.table::fread(pu_path, data.table = FALSE)\n\n# preview first six rows of the tabular planning unit data\n# note that it has some extra columns other than id and cost as per the\n# Marxan format\nhead(pu_dat)##   id       cost status    xloc     yloc\n## 1  3        0.0      0 1116623 -4493479\n## 2 30   752727.5      3 1110623 -4496943\n## 3 56  3734907.5      0 1092623 -4500408\n## 4 58  1695902.1      0 1116623 -4500408\n## 5 84  3422025.6      0 1098623 -4503872\n## 6 85 17890758.4      0 1110623 -4503872\n# load feature data\ndata(sim_features)\n\n# plot the distribution of suitable habitat for each feature\nplot(sim_features, main = paste(\"Feature\", seq_len(nlayers(sim_features))),\n     nr = 2, box = FALSE, axes = FALSE)"},{"path":"getting-started-with-prioritizr.html","id":"initialize-a-problem","chapter":"4 Getting Started with Prioritizr","heading":"4.3.2 Initialize a problem","text":"loaded planning unit feature data, now try initializing conservation planning problems. lot different ways initialize conservation planning problem, just showcase commonly used methods. exhaustive description ways can initialize conservation problem, see help file problem function (can open using code ?problem).First , initialize conservation planning problem using raster data.Generally, recommend initializing problems using raster data possible. problem function needs calculate amount feature planning unit, providing planning unit feature data raster format spatial resolution, extents, coordinate systems, means problem function need geo-processing behind scenes.Sometimes can’t use raster planning unit data planning units aren’t equal-sized grid cells. , example showing can initialize conservation planning problem using planning units formatted spatial vector data. Note pre-computed amount feature planning unit stored data attribute table, pass names columns argument problem function.can also initialize conservation planning problem using tabular planning unit data (.e. data.frame). Since tabular planning unit data contain spatial information, also provide feature data tabular format (.e. data.frame) data showing amount feature planning unit tabular format (.e. data.frame). feature data must “id” column containing unique integer identifier feature, planning unit feature data must contain following three columns: “pu” corresponding planning unit identifiers, “species” corresponding feature identifiers, “amount” showing amount given feature given planning unit.information initializing problems, please see help page problem function (can open using code ?problem). Now initialized conservation planning problem, show can customize suit exact needs conservation planning scenario.Although initialized conservation planning problems using several different methods, moving forward, use raster-based planning unit data keep things simple.","code":"\n# create problem\np1 <- problem(sim_pu_raster, sim_features)\n\n# print problem\nprint(p1)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      none\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# print number of planning units\nnumber_of_planning_units(p1)## [1] 90\n# print number of features\nnumber_of_features(p1)## [1] 5\n# create problem with spatial vector data\n# note that we have to specify which column in the attribute table contains\n# the cost data\np2 <- problem(sim_pu_polygons, sim_features, cost_column = \"cost\")\n\n# print problem\nprint(p2)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      none\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# set file path for feature data\nspec_path <- system.file(\"extdata/input/spec.dat\", package = \"prioritizr\")\n\n# load in feature data\nspec_dat <- data.table::fread(spec_path, data.table = FALSE)\n\n# print first six rows of the data\n# note that it contains extra columns\nhead(spec_dat)##   id prop spf   name\n## 1 10  0.3   1  bird1\n## 2 11  0.3   1  nvis2\n## 3 12  0.3   1  nvis8\n## 4 13  0.3   1  nvis9\n## 5 14  0.3   1 nvis14\n## 6 15  0.3   1 nvis20\n# set file path for planning unit vs. feature data\npuvspr_path <- system.file(\"extdata/input/puvspr.dat\", package = \"prioritizr\")\n\n# load in planning unit vs feature data\npuvspr_dat <- data.table::fread(puvspr_path, data.table = FALSE)\n\n# print first six rows of the data\nhead(puvspr_dat)##   species  pu     amount\n## 1      26  56 1203448.84\n## 2      26  58  451670.10\n## 3      26  84  680473.75\n## 4      26  85   97356.24\n## 5      26  86   78034.76\n## 6      26 111 4783274.17\n# create problem\np3 <- problem(pu_dat, spec_dat, cost_column = \"cost\", rij = puvspr_dat)\n\n# print problem\nprint(p3)## Conservation Problem\n##   planning units: data.frame (1751 units)\n##   cost:           min: 0, max: 41569219.38232\n##   features:       bird1, nvis2, nvis8, ... (17 features)\n##   objective:      none\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-an-objective","chapter":"4 Getting Started with Prioritizr","heading":"4.3.3 Add an objective","text":"next step add objective problem. problem objective used specify primary goal problem (.e. quantity maximized minimized). conservation planning problems involve minimizing maximizing kind objective. instance, might require solution conserves enough habitat species minimizing overall cost reserve network. Alternatively, might require solution maximizes number conserved species ensuring cost reserve network exceed budget.Please note objectives added way regardless type data used initialize problem.prioritizr R package supports variety different objective functions.Minimum set objective: Minimize cost solution whilst ensuring targets met (Rodrigues et al. 2000). objective similar used Marxan (Ball et al. 2009). example, can add minimum set objective problem using following code.Maximum cover objective: Represent least one instance many features possible within given budget (Church et al. 1996).Maximum features objective: Fulfill many targets possible ensuring cost solution exceed budget (inspired Cabeza & Moilanen 2001). object similar maximum cover objective except option later specifying targets feature. practice, objective useful maximum cover objective features often require certain amount area persist simply capturing single instance habitat feature generally unlikely enhance long-term persistence.Minimum shortfall objective: Minimize shortfall many targets possible ensuring cost solution exceed budget. practice, objective useful large amount left-budget using maximum feature representation objective remaining funds need allocated places enhance representation features unmet targets.Maximum utility objective: Secure much features possible without exceeding budget. objective functionally equivalent selecting planning units greatest amounts feature (e.g. species richness). Generally, don’t encourage use objective rarely identify complementary solutions—solutions adequately conserve range different features—except perhaps explore trade-offs provide baseline solution compare solutions.","code":"\n# create a new problem that has the minimum set objective\np3 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective()\n\n# print the problem\nprint(p3)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a new problem that has the maximum coverage objective and a budget\n# of 5000\np4 <- problem(sim_pu_raster, sim_features) %>%\n  add_max_cover_objective(5000)\n\n# print the problem\nprint(p4)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Maximum coverage objective [budget (5000)]\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a new problem that has the maximum features objective and a budget\n# of 5000\np5 <- problem(sim_pu_raster, sim_features) %>%\n  add_max_features_objective(budget = 5000)\n\n# print the problem\nprint(p5)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Maximum representation objective [budget (5000)]\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a new problem that has the minimum shortfall objective and a budget\n# of 5000\np6 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_shortfall_objective(budget = 5000)\n\n# print the problem\nprint(p6)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum shortfall objective [budget (5000)]\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a new problem that has the maximum utility objective and a budget\n# of 5000\np9 <- problem(sim_pu_raster, sim_features) %>%\n      add_max_utility_objective(budget = 5000)\n\n# print the problem\nprint(p9)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Maximum utility objective [budget (5000)]\n##   targets:        none\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-targets","chapter":"4 Getting Started with Prioritizr","heading":"4.3.4 Add targets","text":"conservation planning problems require targets. Targets used specify minimum amount proportion feature’s distribution needs protected solution. example, may want develop reserve network secure 20% distribution feature minimal cost.four ways specifying targets prioritizr R package:Absolute targets: Targets expressed total amount feature study area need secured. example, binary feature data showed absence presence suitable habitat across study area, set absolute target 5 mean require 5 planning units suitable habitat solution.Relative targets: Targets set proportion (0 1) total amount feature study area. example, binary feature data feature occupied total 20 planning units study area, set relative target 50 % specify solution must secure 10 planning units feature. alternatively specify absolute target 10 achieve result, sometimes proportions easier work .Log-linear targets: Targets expressed using scaling factors log-linear interpolation. method specifying targets commonly used global prioritization analyses (Rodrigues et al. 2004).Manual targets: Targets manually specified. really recommended advanced users problems involve multiple management zones. See zones vignette information targets.functions specifying objective problem, try adding multiple targets problem, recently added set targets used.","code":"\n# create a problem with targets which specify that the solution must conserve\n# a need a sum total of 3 units of suitable habitat for each feature\np10 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_absolute_targets(3)\n\n# print problem\nprint(p10)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Absolute targets [targets (min: 3, max: 3)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a problem with the minimum set objective and relative targets of 10 %\n# for each feature\np11 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1)\n\n# print problem\nprint(p11)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create a problem with targets which specify that we need 10 % of the habitat\n# for the first feature, 15 % for the second feature, 20 % for the third feature\n# 25 % for the fourth feature and 30 % of the habitat for the fifth feature\ntargets <- c(0.1, 0.15, 0.2, 0.25, 0.3)\np12 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(targets)\n\n# print problem\nprint(p12)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.3)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create problem with added log-linear targets\np13 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_loglinear_targets(10, 0.9, 100, 0.2)\n\n# print problem\nprint(p13)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Absolute targets [targets (min: 17.290505409161, max: 21.5906174426385)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-constraints","chapter":"4 Getting Started with Prioritizr","heading":"4.3.5 Add constraints","text":"constraint can added conservation planning problem ensure solutions exhibit specific property. example, can used make sure solutions select specific planning unit selected planning units solution follow certain configuration.following constraints can added conservation planning problems prioritizr R package.Locked constraints: Add constraints ensure certain planning units prioritized solution. example, may desirable lock planning units inside existing protected areas solution fills gaps existing reserve network.Locked constraints: Add constraints ensure certain planning units prioritized solution. example, may useful lock planning units degraded suitable conserving species.Neighbor constraints: Add constraints conservation problem ensure selected planning units least certain number neighbors.Contiguity constraints: Add constraints conservation problem ensure selected planning units spatially connected form spatially contiguous unit.Feature contiguity constraints: Add constraints ensure feature represented contiguous unit dispersible habitat. constraints advanced version implemented add_contiguity_constraints function, ensure feature represented contiguous unit entire solution form contiguous unit.Mandatory allocation constraints: Add constraints ensure every planning unit allocated management zone solution. Please note function can used problems contain multiple zones. information problems multiple zones example using function, see Management Zones vignette.particular, add_locked_in_constraints add_locked_out_constraints functions incredibly useful real-world conservation planning exercises, ’s worth pointing several ways can specify planning units locked solutions. use raster planning unit data, can also use raster data specify planning units locked locked .planning unit data spatial vector format (similar sim_pu_polygons data) tabular format (similar pu_dat), can use field names data refer planning units locked / . example, sim_pu_polygons object TRUE / FALSE values “locked_in” field indicate planning units selected solution. use data field specify planning units TRUE values locked using following methods.","code":"\n# create problem with constraints which specify that the first planning unit\n# must be selected in the solution\np14 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_locked_in_constraints(1)\n\n# print problem\nprint(p14)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Locked in planning units [1 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create problem with constraints which specify that the second planning unit\n# must not be selected in the solution\np15 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_locked_out_constraints(2)\n\n# print problem\nprint(p15)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Locked out planning units [1 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create problem with constraints which specify that all selected planning units\n# in the solution must have at least 1 neighbor\np16 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_neighbor_constraints(1)\n\n# print problem\nprint(p16)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Neighbor constraint [number of neighbors (1), zones]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create problem with constraints which specify that all selected planning units\n# in the solution must form a single contiguous unit\np17 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_contiguity_constraints()\n\n# print problem\nprint(p17)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Contiguity constraints [apply constraints? (1), zones]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# create problem with constraints which specify that the planning units used\n# to conserve each feature must form a contiguous unit\np18 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_feature_contiguity_constraints()\n\n# print problem\nprint(p18)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Feature contiguity constraints [apply constraints? (1), layer.1 zones, layer.2 zones, layer.3 zones, layer.4 zones, layer.5 zones]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# load data to lock in or lock out planning units\ndata(sim_locked_in_raster)\ndata(sim_locked_out_raster)\n\n# plot the locked data\nplot(stack(sim_locked_in_raster, sim_locked_out_raster),\n     main = c(\"Locked In\", \"Locked Out\"))\n# create a problem using raster planning unit data and use the locked raster\n# data to lock in some planning units and lock out some other planning units\np19 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_locked_in_constraints(sim_locked_in_raster) %>%\n       add_locked_out_constraints(sim_locked_out_raster)\n\n# print problem\nprint(p19)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Locked in planning units [10 locked units]\n##                    Locked out planning units [10 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# preview first six rows of the attribute table for sim_pu_polygons\nhead(sim_pu_polygons@data)##       cost locked_in locked_out\n## 1 215.8638     FALSE      FALSE\n## 2 212.7823     FALSE      FALSE\n## 3 207.4962     FALSE      FALSE\n## 4 208.9322     FALSE       TRUE\n## 5 214.0419     FALSE      FALSE\n## 6 213.7636     FALSE      FALSE\n# specify locked in data using the field name\np20 <- problem(sim_pu_polygons, sim_features, cost_column = \"cost\") %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_locked_in_constraints(\"locked_in\")\n\n# print problem\nprint(p20)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Locked in planning units [10 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# specify locked in data using the values in the field\np21 <- problem(sim_pu_polygons, sim_features, cost_column = \"cost\") %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_locked_in_constraints(which(sim_pu_polygons$locked_in))\n\n# print problem\nprint(p21)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <Locked in planning units [10 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-penalties","chapter":"4 Getting Started with Prioritizr","heading":"4.3.6 Add penalties","text":"can also add penalties problem favor penalize solutions according secondary objective.Unlike constraint functions, functions add extra information objective function optimization function penalize solutions exhibit specific characteristics. example, penalties can added problem avoid highly fragmented solutions expense accepting slightly expensive solutions. penalty functions penalty argument controls relative importance secondary penalty function compared primary objective function. worth noting incredibly low incredibly high penalty values—relative main objective function—can cause problems take long time solve, trying range different penalty values can helpful limit solver run set period time.prioritizr R package currently offers two methods adding penalties conservation planning problem.Boundary penalties: Add penalties penalize solutions excessively fragmented. penalties similar used Marxan (Ball et al. 2009; Beyer et al. 2016).Connectivity penalties: Add penalties favor solutions select combinations planning units high connectivity . penalties similar used Marxan Zones (Watts et al. 2009; Beyer et al. 2016). function supports symmetric asymmetric connectivities among planning units.Linear penalties: Add penalties penalize solutions select planning units according certain variable (e.g. anthropogenic pressure).","code":"\n# create problem with penalties that penalize fragmented solutions with a\n# penalty factor of 0.01\np22 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_boundary_penalties(penalty = 0.01)\n\n# print problem\nprint(p22)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <Boundary penalties [edge factor (min: 0.5, max: 0.5), penalty (0.01), zones]>\n##   portfolio:      default\n##   solver:         default\n# create problem with penalties that favor combinations of planning units with\n# high connectivity, here we will use only the first four layers in\n# sim_features for the features and we will use the fifth layer in sim_features\n# to represent the connectivity data, where the connectivity_matrix function\n# will create a matrix showing the average strength of connectivity between\n# adjacent planning units using the data in the fifth layer of sim_features\np23 <- problem(sim_pu_raster, sim_features[[1:4]]) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_boundary_penalties(penalty = 5,\n                              data = connectivity_matrix(sim_pu_raster,\n                                                         sim_features[[5]]))\n\n# print problem\nprint(p23)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, layer.4 (4 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <Boundary penalties [edge factor (min: 0.5, max: 0.5), penalty (5), zones]>\n##   portfolio:      default\n##   solver:         default\n# create data for penalizing planning units\npen_raster <- simulate_cost(sim_pu_raster)\n\n# create problem with penalties that penalize solutions that select\n# planning units with high values in the pen_raster object,\n# here we will use a penalty value of 5 to indicate the trade-off (scaling)\n# between the penalty values (in the sim_pu_raster) and the main objective\n# (i.e. the cost of the solution)\np24 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_linear_penalties(penalty = 5, data = pen_raster)\n\n# print problem\nprint(p24)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      default\n##   constraints:    <none>\n##   penalties:      <Linear penalties [penalty (5)]>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-the-decision-types","chapter":"4 Getting Started with Prioritizr","heading":"4.3.7 Add the decision types","text":"Conservation planning problems involve making decisions planning units managed.decisions associated management actions (e.g. turning planning unit protected area). type decision describes action applied planning units. instance, default decision-type binary decision type, meaning either selecting selecting planning units management.prioritizr R package currently offers following types decisions customizing problems.Binary decisions: Add binary decision conservation planning problem. classic decision either prioritizing prioritizing planning unit. Typically, decision assumed action buying planning unit include protected area network. decision added problem object, decision class used default.Proportion decisions: Add proportion decision problem. relaxed decision part planning unit can prioritized, opposed default entire planning unit. Typically, decision assumed action buying fraction planning unit include protected area network. Generally, problems can solved much faster proportion-type decisions binary-type decisions, can useful commercial solvers available.Semi-continuous decisions: Add semi-continuous decision problem. decision similar proportion decisions except upper bound parameter. default, decision can range prioritizing none (0%) (100%) planning unit. However, upper bound can specified ensure fraction (e.g. 80%) planning unit can purchased. type decision may useful practical conserve entire area indicated planning unit.","code":"\n# add binary decisions to a problem\np25 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions()\n\n# print problem\nprint(p25)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# add proportion decisions to a problem\np26 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_proportion_decisions()\n\n# print problem\nprint(p26)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Proportion decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default\n# add semi-continuous decisions to a problem, where we can only manage at most\n# 50 % of the area encompassed by a planning unit\np27 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_semicontinuous_decisions(0.5)\n\n# print problem\nprint(p27)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Semicontinuous decision [upper limit (0.5)]\n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"add-a-solver","chapter":"4 Getting Started with Prioritizr","heading":"4.3.8 Add a solver","text":"Next, specifying mathematical formulation underpins conservation planning problem, can specify problem solved. specify information, prioritizr R package automatically use best solver currently installed system reasonable defaults. strongly recommend installing Gurobi software suite gurobi R package solve problems, information topic please refer Gurobi Installation Guide.Currently, prioritizr R package supports three different solvers.Gurobi solver: Gurobi state art commercial optimization software. far fastest solvers can used solve conservation problems. However, freely available. said, special licenses available academics cost.IBM CPLEX solver: IBM CPLEX commercial optimization software. faster open source solvers available generating prioritizations (see ), however, freely available. Similar Gurobi software, special licenses available academics cost.Rsymphony solver: SYMPHONY open-source integer programming solver part Computational Infrastructure Operations Research (COIN-) project, initiative promote development open-source tools operations research. Rsymphony R package provides interface COIN-available Comprehensive R Archive Network (CRAN).lpsymphony solver: lpsymphony R package provides different interface COIN-software suite. package may easier install Windows Mac OSX operating systems Rsymphony R package. Unlike Rsymphony R package, lpsymphony R package distributed Bioconductor.","code":"\n# create a problem and specify that Gurobi should be used to solve the problem\n# and specify an optimality gap of zero to obtain the optimal solution\np28 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions() %>%\n       add_gurobi_solver(gap = 0)\n\n# print problem\nprint(p28)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (1)]\n# create a problem and specify that IBM CPLEX should be used to solve the\n# problem and specify an optimality gap of zero to obtain the optimal solution\n# p29 <- problem(sim_pu_raster, sim_features) %>%\n#        add_min_set_objective() %>%\n#        add_relative_targets(0.1) %>%\n#        add_binary_decisions() %>%\n#        add_cplex_solver(gap = 0)\n# \n# # print problem\n# print(p29)\n# create a problem and specify that Rsymphony should be used to solve the\n# problem and specify an optimality gap of zero to obtain the optimal solution\n# p30 <- problem(sim_pu_raster, sim_features) %>%\n#        add_min_set_objective() %>%\n#        add_relative_targets(0.1) %>%\n#        add_binary_decisions() %>%\n#        add_rsymphony_solver(gap = 0)\n# \n# # print problem\n# print(p30)\n# create a problem and specify that lpsymphony should be used to solve the\n# problem and specify an optimality gap of zero to obtain the optimal solution\np31 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions() %>%\n       add_lpsymphony_solver(gap = 0)\n\n# print problem\nprint(p31)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Lpsymphony [first_feasible (0), gap (0), time_limit (-1), verbose (1)]"},{"path":"getting-started-with-prioritizr.html","id":"add-a-portfolio","chapter":"4 Getting Started with Prioritizr","heading":"4.3.9 Add a portfolio","text":"Many conservation planning exercises require portfolio solutions. example, real-world exercises can involve presenting decision makers range near-optimal decisions. Additionally, number times different planning units selected different solutions can provide insight relative importance.following methods available generating portfolio solutions.Extra portfolio: Generate portfolio solutions storing feasible solutions found optimization process. Note method requires Gurobi optimization software used generate solutions.Top portfolio: Generate portfolio solutions finding pre-specified number solutions closest optimality (.e top solutions). Note method requires Gurobi optimization software used generate solutions.Gap portfolio: Generate portfolio solutions finding certain number solutions within pre-specified optimality gap. method especially useful generating multiple solutions can used calculate selection frequencies (similar Marxan). Note method requires Gurobi optimization software used generate solutions.Cuts portfolio: Generate portfolio distinct solutions within pre-specified optimality gap. method recommended Gurobi optimization solver available.Shuffle portfolio: Generate portfolio solutions randomly reordering data prior attempting solve problem. Gurobi optimization solver available, method fastest method generating set number solutions within specified distance optimality.","code":"\n# create a problem and specify that a portfolio should be created using\n# extra solutions found while solving the problem\np32 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions() %>%\n       add_extra_portfolio()\n\n# print problem\nprint(p32)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      Extra portfolio\n##   solver:         default\n# create a problem and specify that a portfolio should be created using\n# the top five solutions\np33 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions() %>%\n       add_top_portfolio(number_solutions = 5)\n\n# print problem\nprint(p33)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      Top portfolio [number_solutions (5)]\n##   solver:         default\n# create a problem and specify that a portfolio should be created by\n# finding five solutions within 10% of optimality\np34 <- problem(sim_pu_raster, sim_features) %>%\n       add_min_set_objective() %>%\n       add_relative_targets(0.1) %>%\n       add_binary_decisions() %>%\n       add_gap_portfolio(number_solutions = 5, pool_gap = 0.2)\n\n# print problem\nprint(p34)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      Gap portfolio [number_solutions (5), pool_gap (0.2)]\n##   solver:         default\n# create a problem and specify that a portfolio containing 10 solutions\n# should be created using using Bender's cuts\np35 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_binary_decisions() %>%\n  add_cuts_portfolio(number_solutions = 10)\n\n# print problem\nprint(p35)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      Cuts portfolio [number_solutions (10)]\n##   solver:         default\n# create a problem and specify a portfolio should be created that contains\n# 10 solutions and that any duplicate solutions should not be removed\np36 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_binary_decisions() %>%\n  add_shuffle_portfolio(number_solutions = 10, remove_duplicates = FALSE)\n\n# print problem\nprint(p36)## Conservation Problem\n##   planning units: RasterLayer (90 units)\n##   cost:           min: 190.13276, max: 215.86384\n##   features:       layer.1, layer.2, layer.3, ... (5 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.1, max: 0.1)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      Shuffle portfolio [number_solutions (10), remove_duplicates (0), threads (1)]\n##   solver:         default"},{"path":"getting-started-with-prioritizr.html","id":"solve-the-problem","chapter":"4 Getting Started with Prioritizr","heading":"4.3.10 Solve the problem","text":"Finally, formulating conservation planning problem specifying problem solved, can use solve function obtain solution. Note solver typically print information describing size problem report progress searching suitable solution.can plot solution planning unit input data spatially referenced raster format. output format always match planning unit data used initialize problem. example, solution problem planning units spatial vector (shapefile) format also spatial vector format. Similarly, planning units tabular format (.e. data.frame), solution also returned tabular format.can also extract attributes solution describe quality solution optimization process.","code":"\n# formulate the problem\np37 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_boundary_penalties(penalty = 500, edge_factor = 0.5) %>%\n  add_binary_decisions()\n\n# solve the problem (using the default solver)\ns37 <- solve(p37)## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 293 rows, 234 columns and 1026 nonzeros\n## Model fingerprint: 0xbd38144b\n## Variable types: 0 continuous, 234 integer (234 binary)\n## Coefficient statistics:\n##   Matrix range     [2e-01, 1e+00]\n##   Objective range  [1e+02, 4e+02]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [3e+00, 8e+00]\n## Found heuristic solution: objective 20287.196992\n## Found heuristic solution: objective 3087.9617505\n## Presolve time: 0.00s\n## Presolved: 293 rows, 234 columns, 1026 nonzeros\n## Variable types: 0 continuous, 234 integer (234 binary)\n## Presolved: 293 rows, 234 columns, 1026 nonzeros\n## \n## \n## Root relaxation: objective 2.265862e+03, 218 iterations, 0.01 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0 2265.86242    0  234 3087.96175 2265.86242  26.6%     -    0s\n## H    0     0                    2920.9854189 2265.86242  22.4%     -    0s\n##      0     0 2327.26806    0  232 2920.98542 2327.26806  20.3%     -    0s\n##      0     0 2368.37316    0  226 2920.98542 2368.37316  18.9%     -    0s\n##      0     0 2376.91951    0  223 2920.98542 2376.91951  18.6%     -    0s\n##      0     0 2376.91951    0  223 2920.98542 2376.91951  18.6%     -    0s\n## H    0     0                    2910.0202492 2376.91951  18.3%     -    0s\n## H    0     0                    2676.6543486 2376.91951  11.2%     -    0s\n##      0     2 2377.44918    0  223 2676.65435 2377.44918  11.2%     -    0s\n## H   27    27                    2676.6537993 2377.44918  11.2%  16.9    0s\n## H   56    40                    2676.6531808 2388.87827  10.8%  16.2    0s\n## \n## Cutting planes:\n##   Gomory: 3\n## \n## Explored 57 nodes (1397 simplex iterations) in 0.16 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 5: 2676.65 2910.02 2920.99 ... 20287.2\n## \n## Optimal solution found (tolerance 1.00e-01)\n## Best objective 2.676653180861e+03, best bound 2.413625263266e+03, gap 9.8267%\n# plot solution\nplot(s37, col = c(\"grey90\", \"darkgreen\"), main = \"Solution\",\n     xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1))\n# extract the objective (numerical value being minimized or maximized)\nprint(attr(s37, \"objective\"))## solution_1 \n##   2676.653\n# extract time spent solving solution\nprint(attr(s37, \"runtime\"))## solution_1 \n##  0.1604471\n# extract state message from the solver that describes why this specific\n# solution was returned\nprint(attr(s37, \"status\"))## solution_1 \n##  \"OPTIMAL\""},{"path":"getting-started-with-prioritizr.html","id":"evaluate-the-performance-of-a-solution","chapter":"4 Getting Started with Prioritizr","heading":"4.3.11 Evaluate the performance of a solution","text":"obtaining solution conservation planning problem, can useful calculate various summary statistics understand performance. following functions available summarize solution:Calculate number planning units selected within solution.Calculate total cost solution.Calculate well features represented solution. function can used problems built using targets built using targets.Calculate well feature representation targets met solution. function can used problems containing targets.Calculate exposed boundary length (perimeter) associated solution.Calculate connectivity held within solution.","code":"\n# calculate statistic\neval_n_summary(p37, s37)## # A tibble: 1 x 2\n##   summary  cost\n##   <chr>   <dbl>\n## 1 overall    10\n# calculate statistic\neval_cost_summary(p37, s37)## # A tibble: 1 x 2\n##   summary  cost\n##   <chr>   <dbl>\n## 1 overall 2002.\n# calculate statistics\neval_feature_representation_summary(p37, s37)## # A tibble: 5 x 5\n##   summary feature total_amount absolute_held relative_held\n##   <chr>   <chr>          <dbl>         <dbl>         <dbl>\n## 1 overall layer.1         83.3          8.96         0.108\n## 2 overall layer.2         31.2          3.19         0.102\n## 3 overall layer.3         72.0          7.56         0.105\n## 4 overall layer.4         42.7          4.32         0.101\n## 5 overall layer.5         56.7          5.93         0.105\n# calculate statistics\neval_target_coverage_summary(p37, s37, include_zone = FALSE, include_sense = FALSE)## # A tibble: 5 x 9\n##   feature met   total_amount absolute_target absolute_held absolute_shortfall relative_target relative_held relative_shortfall\n##   <chr>   <lgl>        <dbl>           <dbl>         <dbl>              <dbl>           <dbl>         <dbl>              <dbl>\n## 1 layer.1 TRUE          83.3            8.33          8.96                  0             0.1         0.108                  0\n## 2 layer.2 TRUE          31.2            3.12          3.19                  0             0.1         0.102                  0\n## 3 layer.3 TRUE          72.0            7.20          7.56                  0             0.1         0.105                  0\n## 4 layer.4 TRUE          42.7            4.27          4.32                  0             0.1         0.101                  0\n## 5 layer.5 TRUE          56.7            5.67          5.93                  0             0.1         0.105                  0\n# calculate statistic\neval_boundary_summary(p37, s37)## # A tibble: 1 x 2\n##   summary boundary\n##   <chr>      <dbl>\n## 1 overall     1.35\n# calculate statistic\n# here we use the raster data for the first feature as an example\n# to parametrize pair-wise connectivity between different planning units\neval_connectivity_summary(\n  p37, s37, data = connectivity_matrix(sim_pu_raster, sim_features[[1]]))## # A tibble: 1 x 2\n##   summary connectivity\n##   <chr>          <dbl>\n## 1 overall         1.80"},{"path":"getting-started-with-prioritizr.html","id":"importance-irreplaceability","chapter":"4 Getting Started with Prioritizr","heading":"4.3.12 Importance (irreplaceability)","text":"Conservation plans can take long time implement. Since funding availability habitat quality can decline time, critical important places prioritization scheduled protection early possible. instance,\n* planning units solution might contain many rare species occur planning units.\n* planning units might offer especially high return investment reduces costs considerably.consequence, conservation planners often need information planning units selected prioritization important overall success prioritization. achieve , conservation planners can use importance (irreplaceability) scores planning unit selected solution.prioritizr R package offers multiple methods assessing importance. includes scores calculated based :Replacement Costs: [eval_replacement_importance(); Cabeza & Moilanen (2006)] quantify change objective function (e.g. additional costs required meet feature targets) optimal solution given planning unit solution acquired. can:\naccount cost different planning units,\naccount multiple management zones,\napply objective function, \nidentify truly irreplaceable planning units (denoted infinite values).\nReplacement Costs: [eval_replacement_importance(); Cabeza & Moilanen (2006)] quantify change objective function (e.g. additional costs required meet feature targets) optimal solution given planning unit solution acquired. can:account cost different planning units,account multiple management zones,apply objective function, andidentify truly irreplaceable planning units (denoted infinite values).Ferrier Scores: [eval_ferrier_importance(); Ferrier et al. (2000)] quantify importance planning units meeting feature targets. can applied conservation problems minimum set objective single zone (.e. classic Marxan-type problem). Furthermore—unlike replacement cost scores—Ferrier scores provide score feature within planning unit, providing insight certain planning units important planning units.Ferrier Scores: [eval_ferrier_importance(); Ferrier et al. (2000)] quantify importance planning units meeting feature targets. can applied conservation problems minimum set objective single zone (.e. classic Marxan-type problem). Furthermore—unlike replacement cost scores—Ferrier scores provide score feature within planning unit, providing insight certain planning units important planning units.rarity weighted richness scores [eval_rare_richness_importance(); Williams et al. (1996)] simply measure biological diversity. account planning costs, multiple management zones, objective functions, feature targets (weightings). merely describe spatial patterns biodiversity, account many factors needed quantify importance planning unit achieving conservation goals.rarity weighted richness scores [eval_rare_richness_importance(); Williams et al. (1996)] simply measure biological diversity. account planning costs, multiple management zones, objective functions, feature targets (weightings). merely describe spatial patterns biodiversity, account many factors needed quantify importance planning unit achieving conservation goals.recommend using replacement cost scores small moderate sized problems (e.g. less 30,000 planning units) feasible . can take long time compute replacement cost scores, simply feasible compute scores particularly large problems. moderate large sized problems (e.g. 30,000 planning units), recommend using rarity weighted richness scores. Beware, known decades static measures biodiversity lead poor conservation plans (Kirkpatrick 1983). Although Ferrier method also provided, recommend using method verified statistical expert.generate solution, calculate importance scores planning units selected solution using three different methods.Although rarity weighted richness scores can approximate scores derived two methods certain conservation planning exercises, can see rarity weighted richness scores provide completely different results case.","code":"\n# formulate the problem\np38 <- problem(sim_pu_raster, sim_features) %>%\n  add_min_set_objective() %>%\n  add_relative_targets(0.1) %>%\n  add_binary_decisions()\n\n# solve the problem\ns38 <- solve(p38)## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 5 rows, 90 columns and 450 nonzeros\n## Model fingerprint: 0x6442bf6e\n## Variable types: 0 continuous, 90 integer (90 binary)\n## Coefficient statistics:\n##   Matrix range     [2e-01, 9e-01]\n##   Objective range  [2e+02, 2e+02]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [3e+00, 8e+00]\n## Found heuristic solution: objective 2337.9617505\n## Presolve time: 0.00s\n## Presolved: 5 rows, 90 columns, 450 nonzeros\n## Variable types: 0 continuous, 90 integer (90 binary)\n## Presolved: 5 rows, 90 columns, 450 nonzeros\n## \n## \n## Root relaxation: objective 1.931582e+03, 12 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0 1931.58191    0    4 2337.96175 1931.58191  17.4%     -    0s\n## H    0     0                    1987.3985265 1931.58191  2.81%     -    0s\n## \n## Explored 1 nodes (12 simplex iterations) in 0.00 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 1987.4 2337.96 \n## \n## Optimal solution found (tolerance 1.00e-01)\n## Best objective 1.987398526526e+03, best bound 1.931581908865e+03, gap 2.8085%\n# plot solution\nplot(s38, col = c(\"grey90\", \"darkgreen\"), main = \"Solution\",\n     xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1))\n# calculate replacement cost scores and make the solver quiet\nrc38 <- p38 %>%\n  add_default_solver(gap = 0, verbose = FALSE) %>%\n  eval_replacement_importance(s38)\n\n# plot replacement cost scores\nplot(rc38, main = \"replacement cost\")\n# calculate Ferrier scores and extract total score\nfs38 <- eval_ferrier_importance(p38, s38)[[\"total\"]]\n\n# plot Ferrier scores\nplot(fs38, main = \"Ferrier scores\")\n# calculate rarity weighted richness scores\nrwr38 <- eval_rare_richness_importance(p38, s38)\n\n# plot replacement cost scores\nplot(rwr38, main = \"rarity weighted richness\")"},{"path":"data.html","id":"data","chapter":"5 Spatial Data","heading":"5 Spatial Data","text":"aim tutorial provide worked example vector-based data can used develop conservation prioritizations using prioritizr R package. dataset used tutorial originally subset larger spatial prioritization project performed contract Australia’s Department Environment Water Resources (Klein et al. 2007).dataset contains two items.First, spatial planning unit layer attribute table contains three columns: integer unique identifiers (“id”), unimproved land values (“cost”), existing level protection (“status”). Units 50 % area contained protected areas associated status 2, otherwise associated value 0.First, spatial planning unit layer attribute table contains three columns: integer unique identifiers (“id”), unimproved land values (“cost”), existing level protection (“status”). Units 50 % area contained protected areas associated status 2, otherwise associated value 0.second item dataset raster-based feature data. Specifically, feature data expressed stack rasters (termed RasterStack object). layer stack represents distribution different vegetation class Tasmania, Australia. 62 vegetation classes total. given layer, pixel values indicate presence (value 1) absence (value 0) vegetation class area.second item dataset raster-based feature data. Specifically, feature data expressed stack rasters (termed RasterStack object). layer stack represents distribution different vegetation class Tasmania, Australia. 62 vegetation classes total. given layer, pixel values indicate presence (value 1) absence (value 0) vegetation class area.First, load required packages data.","code":""},{"path":"data.html","id":"data-import","chapter":"5 Spatial Data","heading":"5.1 Data import","text":"","code":"\n# load packages\nlibrary(prioritizr)\nlibrary(prioritizrdata)\nlibrary(sf)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(rgeos)\nlibrary(mapview)\nlibrary(units)\nlibrary(scales)\nlibrary(assertthat)\nlibrary(gridExtra)\nlibrary(dplyr)\n## Some of this data is built in to the Prioritizr package, but it is lower resolution so we use that in the data/ folder.\n# load planning unit data\n# data(tas_pu) # SpatialPolygonsDataFrame # If raw, use readOGR(filename)\n\n# load conservation feature data\n# data(tas_features) # RasterStack # If raw, use stack(filename)\n\nalbers <- \"+proj=aea +lat_1=-18 +lat_2=-36 +lat_0=0 +lon_0=132 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"\n\ntas_pu <- readOGR(\"data/pu.shp\")## OGR data source with driver: ESRI Shapefile \n## Source: \"/Users/jason/GitHub/SpatialPlanning_Workshop2021/data/pu.shp\", layer: \"pu\"\n## with 1130 features\n## It has 5 fields\ntas_features <- stack(\"data/vegetation.tif\")\nproj4string(tas_pu) <- albers # There is a problem with projection so we re-add it here\nproj4string(tas_features) <- albers # There is a problem with projection so we re-add it here\n\ntas_pu$locked_out[1:500] <- FALSE # There is a problem later on so we remove some of the locked out areas to improve chance of a solution\ntas_pu$locked_in <- as.logical(tas_pu$locked_in) # Convert to logical\ntas_pu$locked_out <- as.logical(tas_pu$locked_out) # Convert to logical\n\n# A function to plot the solution. \nplot_solution <- function(s){\n  s$solution_1 <- factor(s$solution_1)\n  plot(st_as_sf(s[, \"solution_1\"]), pal = c(\"grey90\", \"darkgreen\"), main = \"Solution 1\")\n}\n\ntas_sum <- raster::calc(tas_features, sum, na.rm = TRUE)\n\nplot(tas_sum)"},{"path":"data.html","id":"planning-unit-data","chapter":"5 Spatial Data","heading":"5.2 Planning unit data","text":"planning unit data contains spatial data describing geometry planning unit attribute data information planning unit (e.g. cost values). Let’s investigate tas_pu object. attribute data contains 5 columns contain following information:id: unique identifiers planning unitcost: acquisition cost values planning unit (millions Australian dollars).status: status information planning unit (relevant Marxan)locked_in: logical values (.e. TRUE/FALSE) indicating planning units covered protected areas .locked_out: logical values (.e. TRUE/FALSE) indicating planning units managed protected area contain degraded.Now, can try answer questions planning unit data.many planning units planning unit data?highest cost value?many planning units covered protected areas (hint: sum(x))?proportion planning units covered protected areas (hint: mean(x))?many planning units highly degraded (hint: sum(x))?proportion planning units highly degraded (hint: mean(x))?Can verify values locked_in locked_out columns zero one (hint: min(x) max(x))?.Can verify none planning units missing cost values (hint: (.finite(x)))?.Can none planning units duplicated identifiers? (hint: sum(duplicated(x)))?spatial pattern planning unit cost values (hint: use spplot make map).spatial pattern planning units covered protected areas (hint: use spplot make map).","code":"\n# print a short summary of the data\nprint(tas_pu)## class       : SpatialPolygonsDataFrame \n## features    : 1130 \n## extent      : 1080623, 1399989, -4840595, -4497092  (xmin, xmax, ymin, ymax)\n## crs         : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## variables   : 5\n## names       :   id,              cost, status, locked_in, locked_out \n## min values  :    1, 0.192488262910798,      0,         0,          0 \n## max values  : 1130,  61.9272727272727,      2,         1,          1\n# plot the planning unit data\nplot(tas_pu)\n# print the structure of object\nstr(tas_pu, max.level = 2)## Formal class 'SpatialPolygonsDataFrame' [package \"sp\"] with 5 slots\n##   ..@ data       :'data.frame':  1130 obs. of  5 variables:\n##   ..@ polygons   :List of 1130\n##   ..@ plotOrder  : int [1:1130] 217 973 506 645 705 975 253 271 704 889 ...\n##   ..@ bbox       : num [1:2, 1:2] 1080623 -4840595 1399989 -4497092\n##   .. ..- attr(*, \"dimnames\")=List of 2\n##   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n# print the class of the object\nclass(tas_pu)## [1] \"SpatialPolygonsDataFrame\"\n## attr(,\"package\")\n## [1] \"sp\"\n# print the slots of the object\nslotNames(tas_pu)## [1] \"data\"        \"polygons\"    \"plotOrder\"   \"bbox\"        \"proj4string\"\n# print the geometry for the 80th planning unit\ntas_pu@polygons[[80]]## An object of class \"Polygons\"\n## Slot \"Polygons\":\n## [[1]]\n## An object of class \"Polygon\"\n## Slot \"labpt\":\n## [1]  1289177 -4558185\n## \n## Slot \"area\":\n## [1] 1060361\n## \n## Slot \"hole\":\n## [1] FALSE\n## \n## Slot \"ringDir\":\n## [1] 1\n## \n## Slot \"coords\":\n##          [,1]     [,2]\n##  [1,] 1288123 -4558431\n##  [2,] 1287877 -4558005\n##  [3,] 1288177 -4558019\n##  [4,] 1288278 -4558054\n##  [5,] 1288834 -4558038\n##  [6,] 1289026 -4557929\n##  [7,] 1289168 -4557928\n##  [8,] 1289350 -4557790\n##  [9,] 1289517 -4557744\n## [10,] 1289618 -4557773\n## [11,] 1289836 -4557965\n## [12,] 1290000 -4557984\n## [13,] 1290025 -4557987\n## [14,] 1290144 -4558168\n## [15,] 1290460 -4558431\n## [16,] 1288123 -4558431\n## \n## \n## \n## Slot \"plotOrder\":\n## [1] 1\n## \n## Slot \"labpt\":\n## [1]  1289177 -4558185\n## \n## Slot \"ID\":\n## [1] \"79\"\n## \n## Slot \"area\":\n## [1] 1060361\n# print the coordinate reference system\nprint(tas_pu@proj4string)## CRS arguments:\n##  +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs\n# print number of planning units (geometries) in the data\nnrow(tas_pu)## [1] 1130\n# print the first six rows in the attribute data\nhead(tas_pu@data)##   id     cost status locked_in locked_out\n## 0  1 60.24638      0     FALSE      FALSE\n## 1  2 19.86301      0     FALSE      FALSE\n## 2  3 59.68051      0     FALSE      FALSE\n## 3  4 32.41614      0     FALSE      FALSE\n## 4  5 26.17706      0     FALSE      FALSE\n## 5  6 51.26218      0     FALSE      FALSE\n# print the first six values in the cost column of the attribute data\nhead(tas_pu$cost)## [1] 60.24638 19.86301 59.68051 32.41614 26.17706 51.26218\n# print the highest cost value\nmax(tas_pu$cost)## [1] 61.92727\n# print the smallest cost value\nmin(tas_pu$cost)## [1] 0.1924883\n# print average cost value\nmean(tas_pu$cost)## [1] 25.13536\n# plot a map of the planning unit cost data\nspplot(tas_pu, \"cost\")\n# plot an interactive map of the planning unit cost data\nmapview(tas_pu, zcol = \"cost\")"},{"path":"data.html","id":"vegetation-data","chapter":"5 Spatial Data","heading":"5.3 Vegetation data","text":"vegetation data describes spatial distribution 62 vegetation classes study area. data raster format data organized using square grid comprising square grid cells size. case, raster data contains multiple layers (also called “bands”) layer corresponds spatial grid exactly area exactly dimensionality (.e. number rows, columns, cells).dataset, 62 different regular spatial grids layered top – layer corresponding different vegetation class – layers contains grid 343 rows, 320 columns, 109760 cells.Within layer, cell corresponds 1 1 km square. values associated grid cell indicate (one) presence (zero) absence given vegetation class cell.Let’s explore vegetation data.Now, can try answer questions vegetation data.part study area 51st vegetation class found (hint: make map)?proportion cells contain 12th vegetation class?vegetation class present greatest number cells?planning unit data vegetation data coordinate reference system. Can check ?","code":"\n# print a short summary of the data\nprint(tas_features)## class      : RasterStack \n## dimensions : 343, 320, 109760, 62  (nrow, ncol, ncell, nlayers)\n## resolution : 1000, 1000  (x, y)\n## extent     : 1080496, 1400496, -4841217, -4498217  (xmin, xmax, ymin, ymax)\n## crs        : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## names      : vegetation.1, vegetation.2, vegetation.3, vegetation.4, vegetation.5, vegetation.6, vegetation.7, vegetation.8, vegetation.9, vegetation.10, vegetation.11, vegetation.12, vegetation.13, vegetation.14, vegetation.15, ... \n## min values :            0,            0,            0,            0,            0,            0,            0,            0,            0,             0,             0,             0,             0,             0,             0, ... \n## max values :            1,            1,            1,            1,            1,            1,            1,            1,            1,             1,             1,             1,             1,             1,             1, ...\n# plot a map of the 36th vegetation class\nplot(tas_features[[36]])\n# plot an interactive map of the 36th vegetation class\nmapview(tas_features[[36]])\n# print number of rows in the data\nnrow(tas_features)## [1] 343\n# print number of columns  in the data\nncol(tas_features)## [1] 320\n# print number of cells in the data\nncell(tas_features)## [1] 109760\n# print number of layers in the data\nnlayers(tas_features)## [1] 62\n# print  resolution on the x-axis\nxres(tas_features)## [1] 1000\n# print resolution on the y-axis\nyres(tas_features)## [1] 1000\n# print spatial extent of the grid, i.e. coordinates for corners\nextent(tas_features)## class      : Extent \n## xmin       : 1080496 \n## xmax       : 1400496 \n## ymin       : -4841217 \n## ymax       : -4498217\n# print the coordinate reference system\nprint(tas_features@crs)## CRS arguments:\n##  +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs\n# print a summary of the first layer in the stack\nprint(tas_features[[1]])## class      : RasterLayer \n## band       : 1  (of  62  bands)\n## dimensions : 343, 320, 109760  (nrow, ncol, ncell)\n## resolution : 1000, 1000  (x, y)\n## extent     : 1080496, 1400496, -4841217, -4498217  (xmin, xmax, ymin, ymax)\n## crs        : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## source     : /Users/jason/GitHub/SpatialPlanning_Workshop2021/data/vegetation.tif \n## names      : vegetation.1 \n## values     : 0, 1  (min, max)\n# print the value in the 800th cell in the first layer of the stack\nprint(tas_features[[1]][800])##   \n## 0\n# print the value of the cell located in the 30th row and the 60th column of\n# the first layer\nprint(tas_features[[1]][30, 60])##   \n## 0\n# calculate the sum of all the cell values in the first layer\ncellStats(tas_features[[1]], \"sum\")## [1] 36\n# calculate the maximum value of all the cell values in the first layer\ncellStats(tas_features[[1]], \"max\")## [1] 1\n# calculate the minimum value of all the cell values in the first layer\ncellStats(tas_features[[1]], \"min\")## [1] 0\n# calculate the mean value of all the cell values in the first layer\ncellStats(tas_features[[1]], \"mean\")## [1] 0.0003279883\n# calculate the maximum value in each layer\nas_tibble(data.frame(max = cellStats(tas_features, \"max\")))## # A tibble: 62 x 1\n##      max\n##    <dbl>\n##  1     1\n##  2     1\n##  3     1\n##  4     1\n##  5     1\n##  6     1\n##  7     1\n##  8     1\n##  9     1\n## 10     1\n## # … with 52 more rows"},{"path":"spatial-prioritizations.html","id":"spatial-prioritizations","chapter":"6 Spatial prioritizations","heading":"6 Spatial prioritizations","text":"","code":""},{"path":"spatial-prioritizations.html","id":"introduction-1","chapter":"6 Spatial prioritizations","heading":"6.1 Introduction","text":"develop prioritizations identify priority areas protected area establishment.","code":""},{"path":"spatial-prioritizations.html","id":"starting-out-simple","chapter":"6 Spatial prioritizations","heading":"6.2 Starting out simple","text":"start things , let’s keep things simple. Let’s create prioritization using minimum set formulation reserve selection problem. formulation means want solution meet targets biodiversity features minimum cost. , set 5% targets vegetation class use data cost column specify acquisition costs. Unlike Marxan, calibrate species penalty factors (SPFs) ensure target met—prioritizr always return solutions minimum set problems targets met.Although strongly recommend using Gurobi solve problems (add_gurobi_solver), can also use lpsymphony solver workshop (’s much easier install). Gurobi solver much faster lpsymphony solver (see installation instructions).Now let’s examine solution.many planing units selected prioritization? proportion planning units selected prioritization?pattern spatial distribution priority areas?Can verify targets met prioritization (hint: feature_representation(p1, s1[, \"solution_1\"]))?","code":"\n# print planning unit data\nprint(tas_pu)## class       : SpatialPolygonsDataFrame \n## features    : 1130 \n## extent      : 1080623, 1399989, -4840595, -4497092  (xmin, xmax, ymin, ymax)\n## crs         : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## variables   : 5\n## names       :   id,              cost, status, locked_in, locked_out \n## min values  :    1, 0.192488262910798,      0,         0,          0 \n## max values  : 1130,  61.9272727272727,      2,         1,          1\n# make prioritization problem\np1 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_min_set_objective() %>%\n      add_relative_targets(0.05) %>% # 5% representation targets\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p1)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.05, max: 0.05)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns1 <- solve(p1)\n\n# print solution, the solution_1 column contains the solution values\n# indicating if a planning unit is (1) selected or (0) not\nprint(s1)## class       : SpatialPolygonsDataFrame \n## features    : 1130 \n## extent      : 1080623, 1399989, -4840595, -4497092  (xmin, xmax, ymin, ymax)\n## crs         : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## variables   : 6\n## names       :   id,              cost, status, locked_in, locked_out, solution_1 \n## min values  :    1, 0.192488262910798,      0,         0,          0,          0 \n## max values  : 1130,  61.9272727272727,      2,         1,          1,          1\n# calculate number of planning units selected in the prioritization\nsum(s1$solution_1)## [1] 35\n# calculate total cost of the prioritization\nsum(s1$solution_1 * s1$cost)## [1] 808.4013\n# plot solution\nplot_solution(s1)"},{"path":"spatial-prioritizations.html","id":"adding-complexity","chapter":"6 Spatial prioritizations","heading":"6.3 Adding complexity","text":"first prioritization suffers many limitations, let’s add additional constraints problem make useful.First, let’s lock planing units already covered protected areas. vegetation communities already secured inside existing protected areas, might need add many new protected areas existing protected area system meet targets. Since planning unit data (tas_pu) already contains information locked_in column, can use column name specify planning units locked .Let’s pretend talked expert vegetation communities study system recommended 20% target needed vegetation class. , armed information, let’s set targets 20%.Next, let’s lock highly degraded areas. Similar , data present planning unit data can use locked_out column name achieve .Now, let’s compare solutions.cost planning units selected s2, s3, s4?many planning units s2, s3, s4?solutions planning units greater cost? ?first solution (s1) cost less second solution protected areas locked solution (s2)?third solution (s3) cost less fourth solution solution highly degraded areas locked (s4)?Since planning units covered existing protected areas already purchased, cost expanding protected area system based fourth prioritization (s4) (hint: total cost minus cost locked planning units)?happens specify targets exceed total amount vegetation study area try solve problem? can modifying code make p4 add_absolute_targets(1000) instead add_relative_targets(0.2) generating new solution.","code":"\n# make prioritization problem\np2 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_min_set_objective() %>%\n      add_relative_targets(0.05) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p2)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.05, max: 0.05)]\n##   decisions:      Binary decision \n##   constraints:    <Locked in planning units [257 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns2 <- solve(p2)\n\n# plot solution\nplot_solution(s2)\n# make prioritization problem\np3 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_min_set_objective() %>%\n      add_relative_targets(0.2) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p3)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <Locked in planning units [257 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns3 <- solve(p3)\n\n# plot solution\nplot_solution(s3)\n# make prioritization problem\np4 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_min_set_objective() %>%\n      add_relative_targets(0.2) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_locked_out_constraints(\"locked_out\") %>%\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n# print problem\nprint(p4)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <Locked out planning units [45 locked units]\n##                    Locked in planning units [257 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns4 <- solve(p4)\n\n# plot solution\nspplot(s4, \"solution_1\", col.regions = c(\"white\", \"darkgreen\"), main = \"s4\")\nplot_solution(s4)"},{"path":"spatial-prioritizations.html","id":"penalizing-fragmentation","chapter":"6 Spatial prioritizations","heading":"6.4 Penalizing fragmentation","text":"Plans protected area systems facilitate gene flow dispersal individual reserves system. However, prioritizations made far highly fragmented.can add penalties conservation planning problem penalize fragmentation (.e. total exposed boundary length) also need set useful penalty value adding penalties. set penalty value low, end solution identical solution added penalties. set penalty value high, prioritizr take long time solve problem end solution contains lots extra planning units needed (since penalty value high minimizing fragmentation important cost). rule thumb, generally want penalty values 0.00001 0.01 finding useful penalty value requires calibration. “correct” penalty value depends size planning units, main objective values (e.g. cost values), effect fragmentation biodiversity persistence.Let’s create new problem similar previous problem (p4)—except contains boundary length penalties slightly higher optimality gap reduce runtime (default 0.1)—solve . Since planning unit data spatial format (.e. vector raster data), prioritizr can automatically calculate boundary data us.Now let’s compare solutions problems (s5) without (s4) boundary length penalties.cost fourth (s4) fifth (s5) solutions? fifth solution (s5) cost fourth (s4) solution?Try setting penalty value 0.000000001 (.e. 1e-9) instead 0.0005. cost solution now? different fourth solution (s4) (hint: try plotting solutions visualize )? useful penalty value? ?Try setting penalty value 0.5. cost solution now? different fourth solution (s4) (hint: try plotting solutions visualize )? useful penalty value? ?","code":"\n# make prioritization problem\np5 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_min_set_objective() %>%\n      add_boundary_penalties(penalty = 0.0005) %>%\n      add_relative_targets(0.2) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_locked_out_constraints(\"locked_out\") %>%\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p5)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Minimum set objective \n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <Locked in planning units [257 locked units]\n##                    Locked out planning units [45 locked units]>\n##   penalties:      <Boundary penalties [edge factor (min: 0.5, max: 0.5), penalty (5e-04), zones]>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem,\n# note this will take around 30 seconds\ns5 <- solve(p5)\n\n# print solution\nprint(s5)## class       : SpatialPolygonsDataFrame \n## features    : 1130 \n## extent      : 1080623, 1399989, -4840595, -4497092  (xmin, xmax, ymin, ymax)\n## crs         : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## variables   : 6\n## names       :   id,              cost, status, locked_in, locked_out, solution_1 \n## min values  :    1, 0.192488262910798,      0,         0,          0,          0 \n## max values  : 1130,  61.9272727272727,      2,         1,          1,          1\n# plot solution\nplot_solution(s5)"},{"path":"spatial-prioritizations.html","id":"budget-limited-prioritizations","chapter":"6 Spatial prioritizations","heading":"6.5 Budget limited prioritizations","text":"real-world, funding available conservation often limited. consequence, decision makers often need prioritizations total cost priority areas exceed budget.fourth prioritization (s4), found need spend additional $1317 million AUD ensure vegetation community adequately represented protected area system. funds available establishing new protected areas limited $100 million AUD? case, need “budget limited prioritization”. Budget limited prioritizations aim maximize measure conservation benefit subject budget (e.g. number species least one occurrence protected area system, phylogenetic diversity). Let’s create prioritization maximizing number adequately represented features whilst keeping within pre-specified budget.can also add weights specify important meet targets certain features less important features. common approach weighting features assign greater importance features smaller spatial distributions. rationale behind weighting method features smaller spatial distributions greater risk extinction., let’s calculate weights vegetation communities see weighting features changes prioritization.name feature smallest weight?cost sixth (s6) seventh (s7) solutions?seem big difference planning units selected sixth (s6) seventh (s7) solutions?difference features adequately represented sixth (s6) seventh (s7) solutions? , difference?","code":"\n# funds for additional land acquisition (same units as cost data)\nfunds <- 100\n\n# calculate the total budget for the prioritization\nbudget <- funds + sum(s4$cost * s4$locked_in)\nprint(budget)## [1] 8575.56\n# make prioritization problem\np6 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_max_features_objective(budget) %>%\n      add_relative_targets(0.2) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_locked_out_constraints(\"locked_out\") %>%\n      add_binary_decisions() %>%\n      add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p6)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Maximum representation objective [budget (8575.56009869836)]\n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <Locked out planning units [45 locked units]\n##                    Locked in planning units [257 locked units]>\n##   penalties:      <none>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns6 <- solve(p6)\n\n# plot solution\nplot_solution(s6)\n# calculate feature representation\nr6 <- eval_feature_representation_summary(p6, s6[, \"solution_1\"])\n\n# calculate number of features with targets met\nsum(r6$relative_held >= 0.2, na.rm = TRUE)## [1] 28\n# find out which features have their targets met when we add weights,\n# note that NA is for vegetation.61\nprint(r6$feature[r6$relative_held >= 0.2])##  [1] \"vegetation.1\"  \"vegetation.2\"  \"vegetation.3\"  \"vegetation.4\"  \"vegetation.5\"  \"vegetation.6\"  \"vegetation.7\"  \"vegetation.8\" \n##  [9] \"vegetation.11\" \"vegetation.12\" \"vegetation.15\" \"vegetation.17\" \"vegetation.22\" \"vegetation.23\" \"vegetation.25\" \"vegetation.28\"\n## [17] \"vegetation.29\" \"vegetation.30\" \"vegetation.32\" \"vegetation.33\" \"vegetation.34\" \"vegetation.35\" \"vegetation.36\" \"vegetation.37\"\n## [25] \"vegetation.38\" \"vegetation.39\" \"vegetation.40\" \"vegetation.45\"\n# calculate weights as the log inverse number of grid cells that each vegetation\n# class occupies, rescaled between 1 and 100\nwts <- 1 / cellStats(tas_features, \"sum\")\nwts <- rescale(wts, to = c(1, 10))\n\n# print the name of the feature with smallest weight\nnames(tas_features)[which.min(wts)]## [1] \"vegetation.20\"\n# print the name of the feature with greatest weight\nnames(tas_features)[which.max(wts)]## [1] \"vegetation.52\"\n# plot histogram of weights\nhist(wts, main = \"feature weights\")\n# make prioritization problem with weights\np7 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_max_features_objective(budget) %>%\n      add_relative_targets(0.2) %>%\n      add_feature_weights(wts) %>%\n      add_locked_in_constraints(\"locked_in\") %>%\n      add_locked_out_constraints(\"locked_out\") %>%\n      add_binary_decisions() %>%\n       add_gurobi_solver(verbose = FALSE)\n      # add_lpsymphony_solver(verbose = FALSE)\n\n# print problem\nprint(p7)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Maximum representation objective [budget (8575.56009869836)]\n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <Locked out planning units [45 locked units]\n##                    Locked in planning units [257 locked units]>\n##   penalties:      <Feature weights [weights (min: 1, max: 10)]>\n##   portfolio:      default\n##   solver:         Gurobi [first_feasible (0), gap (0.1), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (0)]\n# solve problem\ns7 <- solve(p7)\n\n# plot solution\nplot_solution(s7)\n# calculate feature representation\nr7 <- eval_feature_representation_summary(p7, s7[, \"solution_1\"])\n\n# calculate number of features with targets met\nsum(r7$relative_held >= 0.2, na.rm = TRUE)## [1] 22\n# find out which features have their targets met when we add weights,\n# note that NA is for vegetation.61\nprint(r7$feature[r7$relative_held >= 0.2])##  [1] \"vegetation.2\"  \"vegetation.6\"  \"vegetation.11\" \"vegetation.23\" \"vegetation.28\" \"vegetation.29\" \"vegetation.30\" \"vegetation.32\"\n##  [9] \"vegetation.33\" \"vegetation.34\" \"vegetation.35\" \"vegetation.36\" \"vegetation.37\" \"vegetation.38\" \"vegetation.39\" \"vegetation.40\"\n## [17] \"vegetation.45\" \"vegetation.49\" \"vegetation.50\" \"vegetation.52\" \"vegetation.53\" \"vegetation.61\""},{"path":"spatial-prioritizations.html","id":"solution-portfolios","chapter":"6 Spatial prioritizations","heading":"6.6 Solution portfolios","text":"systematic conservation planning, rarely data stakeholder preferences biodiversity features interested conserving. consequence, often useful generate portfolio near optimal solutions present decision makers guide reserve selection process.Generally want many solutions portfolio (e.g. 1000) ensure portfolio contains range spatially distinct solutions, generate portfolio containing just six near-optimal solutions code doesn’t take long run. also increase optimality gap obtain solutions suboptimal earlier (default gap value 0.1).cost six solutions portfolio? costs different?solutions portfolio different?obtain portfolio different solutions?","code":"\n# make problem with a shuffle portfolio\np8 <- problem(tas_pu, tas_features, cost_column = \"cost\") %>%\n      add_max_features_objective(budget) %>%\n      add_relative_targets(0.2) %>%\n      add_feature_weights(wts) %>%\n      add_binary_decisions() %>%\n      add_shuffle_portfolio(number_solutions = 6,\n                            remove_duplicates = FALSE) %>%\n      add_gurobi_solver(verbose = TRUE, gap = 10)\n      # add_lpsymphony_solver(verbose = TRUE, gap = 10)\n# print problem\nprint(p8)## Conservation Problem\n##   planning units: SpatialPolygonsDataFrame (1130 units)\n##   cost:           min: 0.19249, max: 61.92727\n##   features:       vegetation.1, vegetation.2, vegetation.3, ... (62 features)\n##   objective:      Maximum representation objective [budget (8575.56009869836)]\n##   targets:        Relative targets [targets (min: 0.2, max: 0.2)]\n##   decisions:      Binary decision \n##   constraints:    <none>\n##   penalties:      <Feature weights [weights (min: 1, max: 10)]>\n##   portfolio:      Shuffle portfolio [number_solutions (6), remove_duplicates (0), threads (1)]\n##   solver:         Gurobi [first_feasible (0), gap (10), numeric_focus (0), presolve (2), threads (1), time_limit (2147483647), verbose (1)]\n# solve problem\n# note that this will contain six solutions since we added a portfolio\ns8 <- solve(p8)## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0x0e2ebd61\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 63 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   51   -0.00000  131.98943      -     -    0s\n## H    0     0                      77.7382485  131.98943  69.8%     -    0s\n## \n## Explored 1 nodes (63 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 77.7382 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 7.773824845163e+01, best bound 1.319894286177e+02, gap 69.7870%\n## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0xcb0aa16a\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 67 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   51   -0.00000  131.98943      -     -    0s\n## H    0     0                      83.7033759  131.98943  57.7%     -    0s\n## \n## Explored 1 nodes (67 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 83.7034 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 8.370337585653e+01, best bound 1.319894284215e+02, gap 57.6871%\n## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0xd778b41b\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 63 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   50   -0.00000  131.98943      -     -    0s\n## H    0     0                      85.4772529  131.98943  54.4%     -    0s\n## \n## Explored 1 nodes (63 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 85.4773 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 8.547725289194e+01, best bound 1.319894282820e+02, gap 54.4147%\n## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0xad5c88d1\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 74 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   53   -0.00000  131.98943      -     -    0s\n## H    0     0                      77.5855699  131.98943  70.1%     -    0s\n## \n## Explored 1 nodes (74 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 77.5856 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 7.758556991841e+01, best bound 1.319894289459e+02, gap 70.1211%\n## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0x0a84ba0a\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 74 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   53   -0.00000  131.98943      -     -    0s\n## H    0     0                      76.0886968  131.98943  73.5%     -    0s\n## \n## Explored 1 nodes (74 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 76.0887 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 7.608869684247e+01, best bound 1.319894289459e+02, gap 73.4679%\n## Gurobi Optimizer version 9.1.1 build v9.1.1rc0 (mac64)\n## Thread count: 4 physical cores, 8 logical processors, using up to 1 threads\n## Optimize a model with 63 rows, 1192 columns and 3308 nonzeros\n## Model fingerprint: 0x8776b839\n## Variable types: 0 continuous, 1192 integer (1192 binary)\n## Coefficient statistics:\n##   Matrix range     [1e-05, 2e+02]\n##   Objective range  [7e-08, 1e+01]\n##   Bounds range     [1e+00, 1e+00]\n##   RHS range        [9e+03, 9e+03]\n## Found heuristic solution: objective -0.0000000\n## Presolve removed 0 rows and 143 columns\n## Presolve time: 0.02s\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## Variable types: 0 continuous, 1049 integer (1049 binary)\n## Presolved: 63 rows, 1049 columns, 3152 nonzeros\n## \n## \n## Root relaxation: objective 1.319894e+02, 63 iterations, 0.00 seconds\n## \n##     Nodes    |    Current Node    |     Objective Bounds      |     Work\n##  Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n## \n##      0     0  131.98943    0   50   -0.00000  131.98943      -     -    0s\n## H    0     0                      89.2308365  131.98943  47.9%     -    0s\n## \n## Explored 1 nodes (63 simplex iterations) in 0.02 seconds\n## Thread count was 1 (of 8 available processors)\n## \n## Solution count 2: 89.2308 -0 \n## \n## Optimal solution found (tolerance 1.00e+01)\n## Best objective 8.923083646889e+01, best bound 1.319894282820e+02, gap 47.9191%\n# print solution\nprint(s8)## class       : SpatialPolygonsDataFrame \n## features    : 1130 \n## extent      : 1080623, 1399989, -4840595, -4497092  (xmin, xmax, ymin, ymax)\n## crs         : +proj=aea +lat_0=0 +lon_0=132 +lat_1=-18 +lat_2=-36 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs \n## variables   : 11\n## names       :   id,              cost, status, locked_in, locked_out, solution_1, solution_2, solution_3, solution_4, solution_5, solution_6 \n## min values  :    1, 0.192488262910798,      0,         0,          0,          0,          0,          0,          0,          0,          0 \n## max values  : 1130,  61.9272727272727,      2,         1,          1,          1,          1,          1,          1,          1,          1\n# calculate the cost of the first solution\nsum(s8$solution_1 * s8$cost)## [1] 680.883\n# calculate the cost of the second solution\nsum(s8$solution_2 * s8$cost)## [1] 701.4909\n# calculate the proportion of planning units with the same solution values\n# in the first and second solutions\nmean(s8$solution_1 == s8$solution_2)## [1] 0.9911504\n# plot first solution\nplot_solution(s8)\n# plot all solutions\n# s8_plots <- lapply(paste0(\"solution_\", seq_len(6)), function(x) {\n#   spplot(s8, x, main = x, col.regions = c(\"white\", \"darkgreen\"))\n# })\n# do.call(grid.arrange, append(s8_plots, list(ncol = 3)))\n\ns8$solution_1 <- factor(s8$solution_1)\ns8$solution_2 <- factor(s8$solution_2)\ns8$solution_3 <- factor(s8$solution_3)\ns8$solution_4 <- factor(s8$solution_4)\ns8$solution_5 <- factor(s8$solution_5)\ns8$solution_6 <- factor(s8$solution_6)\n\nplot(st_as_sf(s8[, c(\"solution_1\", \"solution_2\", \"solution_3\", \"solution_4\", \"solution_5\", \"solution_6\")]),\n  pal = c(\"grey90\", \"darkgreen\"))"},{"path":"acknowledgements.html","id":"acknowledgements","chapter":"7 Acknowledgements","heading":"7 Acknowledgements","text":"Many thanks Prioritizr Team development software, providing source code workshops easily develop one.Also Yihui Xie developing bookdown R package underpins notes. also thank Garrett Grolemund Hadley Wickham creating one Rstudio screenshots used manual originally part R Data Science book.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
